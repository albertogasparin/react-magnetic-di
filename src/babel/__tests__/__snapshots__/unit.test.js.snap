// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`babel plugin should do injection if force enabled 1`] = `
"import React, { Component } from 'react';
import { di } from 'react-magnetic-di';
import Modal from 'modal';

function MyComponent() {
  const [_Modal] = di([Modal], MyComponent);
  return __jsx(_Modal, null);
}"
`;

exports[`babel plugin should not error if not a call expression 1`] = `
"import React from 'react';
import { di } from 'react-magnetic-di';
import Modal from 'modal';
const ModalDi = di.mock(Modal, () => null);

function MyComponent() {
  return __jsx(ModalDi, null);
}"
`;

exports[`babel plugin should strip injection if not enabled environment 1`] = `
"import React, { Component } from 'react';
import { di } from 'react-magnetic-di';
import Modal from 'modal';

function MyComponent() {
  return __jsx(Modal, null);
}"
`;

exports[`babel plugin should work and maintain location if not first 1`] = `
"import React from 'react';
import { di } from 'react-magnetic-di';
import Modal from 'modal';
export const MyComponent = function () {
  const something = ''; // comment

  const [_Modal] = di([Modal], MyComponent);
  return __jsx(_Modal, null);
};"
`;

exports[`babel plugin should work in class components 1`] = `
"import React, { Component } from 'react';
import { di } from 'react-magnetic-di';
import Modal from 'modal';

class MyComponent extends Component {
  render() {
    const [_Modal] = di([Modal], MyComponent);
    return __jsx(_Modal, null);
  }

}"
`;

exports[`babel plugin should work in functional components 1`] = `
"import React from 'react';
import { di } from 'react-magnetic-di';
import Modal from 'modal';

const MyComponent = () => {
  const [_Modal] = di([Modal], MyComponent);
  return __jsx(_Modal, null);
};"
`;

exports[`babel plugin should work in functional components declaration 1`] = `
"import React from 'react';
import { di, injectable } from 'react-magnetic-di';
import Modal from 'modal';

function MyComponent() {
  const [_Modal] = di([Modal], MyComponent);
  return __jsx(_Modal, null);
}"
`;

exports[`babel plugin should work in functional components expression 1`] = `
"import React from 'react';
import { di, injectable } from 'react-magnetic-di';
import Modal from 'modal';

const MyComponent = function () {
  const [_Modal] = di([Modal], MyComponent);
  return __jsx(_Modal, null);
};"
`;

exports[`babel plugin should work in wrapped functional components 1`] = `
"import React, { forwardRef } from 'react';
import { di, injectable } from 'react-magnetic-di';
import Modal from 'modal';
const MyComponent = /*#__PURE__*/forwardRef(() => {
  const [_Modal] = di([Modal], null);
  return __jsx(_Modal, null);
});"
`;

exports[`babel plugin should work with locally defined dependencies 1`] = `
"import React from 'react';
import { di } from 'react-magnetic-di';

const useModalStatus = () => true;

const MyComponent2 = () => {
  const [_useModalStatus] = di([useModalStatus], MyComponent2);

  const status = _useModalStatus();

  return status;
};"
`;

exports[`babel plugin should work with multiple dependencies across multiple components 1`] = `
"import React, { Component } from 'react';
import { di } from 'react-magnetic-di';
import Modal from 'modal';

const useModalStatus = () => true;

function MyComponent() {
  const [_Modal, _useModalStatus] = di([Modal, useModalStatus], MyComponent);

  const isOpen = _useModalStatus();

  return isOpen && __jsx(_Modal, null);
}

class MyComponent2 extends Component {
  render() {
    const [_Modal2] = di([Modal], MyComponent2);
    return __jsx(_Modal2, null);
  }

}

;"
`;

exports[`displayName should be correct for named export 1`] = `
"import { withDi } from 'react-magnetic-di';
export const Example = withDi(() => null, []);
Example.displayName = \\"Example\\";"
`;

exports[`displayName should be correct for variable declaration 1`] = `
"import { withDi } from 'react-magnetic-di';
const Example = withDi(() => null, []);
Example.displayName = \\"Example\\";"
`;

exports[`displayName should be correct for variable declaration with renamed import 1`] = `
"import { withDi as withInjection } from 'react-magnetic-di';
export const Example = withInjection(() => null, []);
Example.displayName = \\"Example\\";"
`;

exports[`displayName should ignore locations where it is wrapped 1`] = `
"import { withDi } from 'react-magnetic-di';
import { withIntl } from 'react-intl';
export const Example = withIntl(withDi(() => null, []));"
`;

exports[`displayName should not be changed for default export 1`] = `
"import { withDi } from 'react-magnetic-di';
export default withDi(() => null, []);"
`;
