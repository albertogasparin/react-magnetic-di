// @flow
/* eslint-disable no-redeclare, no-unused-vars */

import type { Node, ComponentType } from 'react';

type Dependency = Function;

declare export class DiProvider extends React$Component<
  {
    children: Node,
    target?: ComponentType<any> | ComponentType<any>[],
    use: Dependency[],
  },
  {
    getDependencies: (
      deps: Dependency[],
      target: ComponentType<any> | ComponentType<any>[]
    ) => Dependency[],
  }
> {}

declare export function withDi(
  component: ComponentType<any>,
  dependencies: Dependency[]
): void;

declare export function mock<T: Dependency>(original: T, mock: T): T;

function di(...dependencies: Dependency[]) {
  di.mock = mock;
}
declare export { di };
